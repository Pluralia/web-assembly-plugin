{
  parserClass="org.jetbrains.webstorm.lang.parser.WebAssemblyParser"

  psiClassPrefix="WebAssembly"
  psiImplClassSuffix="Impl"
  psiPackage="org.jetbrains.webstorm.lang.psi"
  psiImplPackage="org.jetbrains.webstorm.lang.psi.impl"

  elementTypeHolderClass="org.jetbrains.webstorm.lang.psi.WebAssemblyTypes"
  elementTypeClass="org.jetbrains.webstorm.lang.psi.WebAssemblyElementType"         // lang.psi.ElementTypes
  tokenTypeClass="org.jetbrains.webstorm.lang.psi.WebAssemblyTokenType"             // lang.psi.ElementTypes

  psiImplUtilClass="org.jetbrains.webstorm.lang.psi.impl.WebAssemblyPsiImplUtil"
}

webAssemblyFile ::= item_*

private item_ ::= comment | module | modulefield+

comment ::= LINE_COMMENT | BLOCK_COMMENT

module ::= LPAR MODULEKEY IDENTIFIER? modulefield* RPAR
modulefield ::= type | import | func | table | mem | global | export | start | elem | data

functype ::= LPAR FUNCKEY param* result* RPAR
param ::= LPAR PARAMKEY (VALTYPE+ | IDENTIFIER? VALTYPE) RPAR
result ::= LPAR RESULTKEY VALTYPE+ RPAR

memtype ::= UNSIGNED UNSIGNED?      // limits
tabletype ::= memtype FUNCREFKEY

globaltype ::= VALTYPE | LPAR MUTKEY VALTYPE RPAR

instr ::= plaininstr | blockinstr

blocktype ::= typeuse | result?
blockinstr ::= (BLOCKKEY | LOOPKEY)  IDENTIFIER? blocktype instr* ENDKEY IDENTIFIER?
             | IFKEY IDENTIFIER? blocktype instr* (ELSEKEY IDENTIFIER? instr*)? ENDKEY IDENTIFIER?
plaininstr ::= CONTROLINSTR
             | CONTROLINSTR_IDX idx
             | BRTABLEINSTR idx+
             | CALLINDIRECTINSTR typeuse
             | PARAMETRICINSTR
             | VARIABLEINSTR_IDX idx
             | MEMORYINSTR
             | MEMORYINSTR_MEMARG (OFFSETEQKEY UNSIGNED)? (ALIGNEQKEY UNSIGNED)?
             | ICONST (UNSIGNED | SIGNED)
             | FCONST FLOAT
             | NUMERICINSTR

idx ::= UNSIGNED | IDENTIFIER

type ::= LPAR TYPEKEY IDENTIFIER? functype RPAR

typeuse ::= (LPAR TYPEKEY idx RPAR)? param* result*

import ::= LPAR IMPORTKEY STRING STRING importdesc RPAR
importdesc ::= LPAR FUNCKEY IDENTIFIER? typeuse RPAR
             | LPAR TABLEKEY IDENTIFIER? tabletype RPAR
             | LPAR MEMORYKEY IDENTIFIER? memtype RPAR
             | LPAR GLOBALKEY IDENTIFIER? globaltype RPAR

impabbrev ::= LPAR IMPORTKEY STRING STRING RPAR
expabbrev ::= LPAR EXPORTKEY STRING RPAR

func ::= LPAR FUNCKEY IDENTIFIER? (expabbrev | impabbrev)? typeuse local* instr* RPAR
local ::= LPAR LOCALKEY (IDENTIFIER? VALTYPE | VALTYPE+) RPAR

table ::= LPAR TABLEKEY IDENTIFIER? tableaux RPAR
tableaux ::= (impabbrev | expabbrev)? tabletype
           | FUNCREFKEY LPAR ELEMKEY idx* RPAR

mem ::= LPAR MEMORYKEY IDENTIFIER? memaux RPAR
memaux ::= (impabbrev | expabbrev)? memtype
         | LPAR DATAKEY datastring RPAR

global ::= LPAR GLOBALKEY IDENTIFIER? (expabbrev | impabbrev)? globaltype instr* RPAR

export ::= LPAR EXPORTKEY STRING exportdesc RPAR
exportdesc ::= LPAR (FUNCKEY | TABLEKEY | MEMORYKEY | GLOBALKEY) idx RPAR

start ::= LPAR STARTKEY idx RPAR

instrabbrev ::= instr | LPAR OFFSETKEY instr RPAR

elem ::= LPAR ELEMKEY idx? LPAR OFFSETKEY instrabbrev* RPAR idx* RPAR

data ::= LPAR DATAKEY idx? LPAR OFFSETKEY instrabbrev* RPAR datastring* RPAR
datastring ::= STRING*


only_lexer_tokens ::= BLOCK_COMMENT_START | BLOCK_COMMENT_FINISH | BLOCK_COMMENT_CHAR